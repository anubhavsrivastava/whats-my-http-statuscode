[
	{
		"code": 200,
		"msg": "200 OK",
		"description": "The request has succeeded.",
		"additionalInfo": [
			"The payload sent in a 200 response depends on the request method. For the methods defined by this specification, the intended meaning of the payload can be summarized as:",
			"`GET` a representation of the target resource",
			"`HEAD` the same representation as GET, but without the representation data",
			"`POST` a representation of the status of, or results obtained from, the action;",
			"`PUT` `DELETE` a representation of the status of the action;",
			"`OPTIONS` a representation of the communications options;",
			"`TRACE` a representation of the request message as received by the end server.",
			"Aside from responses to CONNECT, a 200 response always has a payload, though an origin server MAY generate a payload body of zero length. If no payload is desired, an origin server ought to send 204 No Content instead. For CONNECT, no payload is allowed because the successful result is a tunnel, which begins immediately after the 200 response header section.",
			"A 200 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls."
		]
	},
	{
		"code": 201,
		"msg": "201 CREATED",
		"description": "The request has been fulfilled and has resulted in one or more new resources being created.",
		"additionalInfo": ["The primary resource created by the request is identified by either a Location header field in the response or, if no Location field is received, by the effective request URI.", "The 201 response payload typically describes and links to the resource(s) created. "]
	},
	{
		"code": 202,
		"msg": "202 ACCEPTED",
		"description": "The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.",
		"additionalInfo": [
			"There is no facility in HTTP for re-sending a status code from an asynchronous operation.",
			"The 202 response is intentionally noncommittal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent's connection to the server persist until the process is completed. The representation sent with this response ought to describe the request's current status and point to (or embed) a status monitor that can provide the user with an estimate of when the request will be fulfilled."
		]
	},
	{
		"code": 203,
		"msg": "203 NON-AUTHORITATIVE INFORMATION",
		"description": "The request was successful but the enclosed payload has been modified from that of the origin server's 200 OK response by a transforming proxy.",
		"additionalInfo": [
			"This status code allows the proxy to notify recipients when a transformation has been applied, since that knowledge might impact later decisions regarding the content. For example, future cache validation requests for the content might only be applicable along the same request path (through the same proxies).",
			"The 203 response is similar to the Warning code of 214 Transformation Applied, which has the advantage of being applicable to responses with any status code.",
			"A 203 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls."
		]
	},
	{
		"code": 204,
		"msg": "204 NO CONTENT",
		"description": "The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.",
		"additionalInfo": [
			"Metadata in the response header fields refer to the target resource and its selected representation after the requested action was applied.",
			"For example, if a 204 status code is received in response to a PUT request and the response contains an ETag header field, then the PUT was successful and the ETag field-value contains the entity-tag for the new representation of that target resource.",
			"The 204 response allows a server to indicate that the action has been successfully applied to the target resource, while implying that the user agent does not need to traverse away from its current \"document view\" (if any). The server assumes that the user agent will provide some indication of the success to its user, in accord with its own interface, and apply any new or updated metadata in the response to its active representation.",
			"For example, a 204 status code is commonly used with document editing interfaces corresponding to a \"save\" action, such that the document being saved remains available to the user for editing. It is also frequently used with interfaces that expect automated data transfers to be prevalent, such as within distributed version control systems.",
			"A 204 response is terminated by the first empty line after the header fields because it cannot contain a message body.",
			"A 204 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls."
		]
	},
	{
		"code": 205,
		"msg": "205 RESET CONTENT",
		"description": "The server has fulfilled the request and desires that the user agent reset the \"document view\", which caused the request to be sent, to its original state as received from the origin server.",
		"additionalInfo": [
			"This response is intended to support a common data entry use case where the user receives content that supports data entry (a form, notepad, canvas, etc.), enters or manipulates data in that space, causes the entered data to be submitted in a request, and then the data entry mechanism is reset for the next entry so that the user can easily initiate another input action.",
			"Since the 205 status code implies that no additional content will be provided, a server MUST NOT generate a payload in a 205 response. In other words, a server MUST do one of the following for a 205 response: a) indicate a zero-length body for the response by including a Content-Length header field with a value of 0; b) indicate a zero-length payload for the response by including a Transfer-Encoding header field with a value of chunked and a message body consisting of a single chunk of zero-length; or, c) close the connection immediately after sending the blank line terminating the header section."
		]
	},
	{
		"code": 206,
		"msg": "206 PARTIAL CONTENT",
		"description": "The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the request's Range header field.",
		"additionalInfo": ["A 206 response is cacheable by default; i.e., unless otherwise indicated by explicit cache controls"]
	},
	{
		"code": 207,
		"msg": "207 MULTI-STATUS",
		"description": "A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.",
		"additionalInfo": ["Although '207' is used as the overall response status code, the recipient needs to consult the contents of the multistatus response body for further information about the success or failure of the method execution. The response MAY be used in success, partial success and also in failure situations."]
	},
	{
		"code": 208,
		"msg": "208 ALREADY REPORTED",
		"description": "Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.",
		"additionalInfo": [
			"For each binding to a collection inside the request's scope, only one will be reported with a 200 status, while subsequent DAV:response elements for all other bindings will use the 208 status, and no DAV:response elements for their descendants are included.",
			"Note that the 208 status will only occur for \"Depth: infinity\" requests, and that it is of particular importance when the multiple collection bindings cause a bind loop",
			"A client can request the DAV:resource-id property in a PROPFIND request to guarantee that they can accurately reconstruct the binding structure of a collection with multiple bindings to a single resource.",
			"For backward compatibility with clients not aware of the 208 status code appearing in multistatus response bodies, it SHOULD NOT be used unless the client has signaled support for this specification using the \"DAV\" request header. Instead, a 508 Loop Detected status should be returned when a binding loop is discovered. This allows the server to return the 508 as the top-level return status, if it discovers it before it started the response, or in the middle of a multistatus, if it discovers it in the middle of streaming out a multistatus response."
		]
	}
]
